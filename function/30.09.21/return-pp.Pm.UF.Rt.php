<?php
/*
 * Инструкция return в PHP
 * hash pp.Pm.UF.Rt
 */

/* Задача 1
 * Сделайте функцию, которая параметром принимает число,
 * а возвращает куб этого числа. С помощью
 * этой функции найдите куб числа 3 и запишите его в переменную $result.
 */

function cub($num) {
    return pow($num, 3);
}
$result = cub(3);

/* Задача 2
 * Сделайте функцию, которая параметром принимает число,
 * а возвращает квадратный корень из этого числа.
 * С помощью этой функции найдите корень числа 3, затем найдите корень числа 4.
 * Просуммируйте полученные результаты и выведите их на экран.
 */

function foo($num) {
    return sqrt($num);
}
$result1 = foo(3); // 1.7320508075689
$result2 = foo(4); // 2
$sum = $result1 + $result2;
echo $sum; // 3.7320508075689

/* Задача 3
    Что выведется на экран в результате выполнения следующего кода:
    function func($num) {
		return $num;

		$result = $num * $num;
		return $result;
	}

	echo func(3);
 */

/* Задача 3 Решение
 * выполнится только 1 инструкция т.е будет 3, т.к после выполнения 1-й инструкции функция завершит работу
 */

/* Задача 4
 * Что выведет каждый из echo в результате выполнения следующего кода:
	function func($num) {
		if ($num <= 0) {
			return abs($num);
		} else {
			return $num * $num;
		}
	}

	echo func(10);
	echo func(-5);
 */

/* Задача 4 решение
 * при первом вызове выполнится модуль -5, т.к число отрицательное согласно условию
 * при втором вызове 10 будет умножение число на саму себя, квадрат числа.
 * Вывод будет при первом и при втором вызове т.к значения соответствуют разным условиям
 */

/* Задача 5
 * Что выведет каждый из echo в результате выполнения следующего кода:
	function func($num) {
		if ($num <= 0) {
			return abs($num);
		}

		return $num * $num;
	}

	echo func(10);
	echo func(-5);
 */

/* Задача 5 Решение
 * Вывод будет аналогичным как и в задаче 4, т.к если число соответсует условию if() то выполнится
 * инструкция которая находится внутри конструкции, если оно не соответсвует условию, то
 * выполнится конструкия которая просто возвращает квадрат числа $num;
 */

/* Задача 6
 * Что выведется на экран в результате выполнения следующего кода:
	function func($num) {
		$sum = 0;

		for ($i = 1; $i <= $num; $i++) {
			$sum += $i;
			return $sum;
		}
	}

	echo func(5);
 * Объясните почему.
 * Что хотел сделать автор данного кода? Исправьте ошибку автора.
 */

/* Задача 6 Решение
 * вывод будет 1 т.к переменная $sum = $sum + $i , то есть цикл выполнит только одну итерацию
 * в данном случае $i=1 значит в переменную $sum запишется 1 и завершит работу.
 * end;
 * Исправление ошибки :
	function func($num) {
		$sum = 0;

		for ($i = 1; $i <= 5; $i++) {
			$sum += $num;
			return $sum;
		}
	}

	echo func(5);

 Обьяснение : в данном случае автор хотел найти сумму числа с накоплением результата в цикле
 инструкцию return нужно вывести из цикла, чтобы цикл выполнил нужное кол-во итераций и дальше3
 return вернул значение
*/
echo "<br>";

/* Задача 7
 * Напишите функцию, которая параметром будет принимать число и делить его на
 * 2 столько раз, пока результат не станет меньше 10. Пусть
 * функция возвращает количество итераций, которое потребовалось для достижения результата.
 */

function square($num) {
   $i = 0; // считает кол-во итераций
    while ($num >= 10) {
            $num = $num / 2;
            $i++;
    }
    return $num . ' ' . $i;
}

echo square(1500);

/* Задача 8
 * Дана следующая функция:
function func($num1, $num2) {
		if ($num1 > 0 and $num2 > 0) {
			$result = $num1 * $num2;
		} else {
			$result = $num1 - $num2;
		}

		return $result;
	}

	echo func(3, 4);

 * Перепишите ее в сокращенной форме согласно изученной теории.
 */

function func($num1, $num2) {
    if ($num1 > 0 and $num2 > 0) {
        return $num1 * $num2;
    } else {
        return $num1 - $num2;
    }
}

echo func(3, 4);

